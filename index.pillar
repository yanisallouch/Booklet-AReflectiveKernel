Au début des années 90, lorsque j'étais étudiant en master, nous avons appris la méta-programmation objet et nous utilisions Common Lisp Object Systems (CLOS) pour programmer.
J'ai adoré ce cours et j'ai réalisé qu'il était assez avancé.
À l'époque, j'ai construit un système de démonstration de théorèmes en CLOS.
Cependant, au fond de moi, je savais que je ne comprenais pas complètement ce qu'était la classe ==Object== ou ce qu'est réellement une métaclasse ; bien sûr, je pouvais répéter le cours et avoir l'air intelligent, mais il y avait cette petite voix qui me disait que je n'étais pas sûr à 100\%.
Puis par hasard j'ai trouvé l'article de Pierre Cointe et j'ai été bluffé par la simplicité du modèle.
J'ai passé 3 jours à réimplémenter le modèle comme un fou parce que c'était trop amusant.
Pour moi, c'était la clé de ma compréhension des systèmes réflexifs basés sur les classes.
Une fois que j'ai terminé, je suis allée voir mon professeur et lui ai dit qu'elle devait l'enseigner et elle m'a dit de le faire.
Depuis lors, je l'enseigne.

Notez que si le projet est historiquement nommé ObjVLisp, il n'a rien à voir avec LISP.
ObjVlisp n'est qu'un petit framework conceptuel mais il fournit une vue condensée et explique les forces en présence dans des systèmes plus grands comme Pharo qui partagent le mantra ''tout est un objet'' que j'aime tant.
Ce livre explique la conséquence d'avoir des classes comme objets.
En outre, il décrit la conception et les conséquences de l'utilisation d'un noyau minimal réfléchi.

Ce faisant, nous apprendrons profondément sur les objets, l'instanciation de la création d'objets, la recherche de messages, la délégation, l'héritage et bien plus encore.

Je tiens à remercier Christopher Fuhrman pour son important travail de relecture, ainsi que kksubbu et Ren\'e-Paul pour leurs suggestions.

— Stéphane Ducasse


${inputFile:path=Chapters/ObjVTheory/ObjVTheory.pillar}$

${inputFile:path=Chapters/ObjV/ObjV.pillar}$

!! Définitions choisies

Smith a été le premier à introduire la réflexion dans un langage de programmation avec 3Lisp ${cite:ref=Smit84a}$. Il définit la réflexion comme suit

- La capacité intégrale d'une entité à se représenter, à opérer et à se traiter de la même manière qu'elle représente, opère et traite son sujet principal.

Dans le contexte des protocoles de méta-objets, Bobrow ${cite:ref=Bobr93a}$ affine la définition comme suit :

- La réflexion est la capacité d'un programme à manipuler comme données quelque chose représentant l'état du programme pendant sa propre exécution. Il y a deux aspects d'une telle manipulation : ''introspection'' et ''intercession'' (...) Les deux aspects nécessitent un mécanisme pour encoder l'état d'exécution en tant que données ; fournir un tel encodage est appelé ''réification''.


Maes a proposé quelques définitions pour la programmation réflexive ${cite:ref=Maes87b}$:

- Un ''système informatique'' est quelque chose qui ''raisonne'' sur et ''agit'' sur une partie du monde, appelée ''domaine'' du système.

- Un système de calcul peut également être "connecté de manière causale" à son domaine. Cela signifie que le système et son domaine sont liés de telle sorte que si l'un des deux change, cela entraîne un effet sur l'autre.

- Un ''méta-système'' est un système de calcul qui a pour domaine un autre système de calcul, appelé ''système-objet''. (...) Un méta-système a une représentation de son système-objet dans ses données. Son programme spécifie le ''méta-calcul'' sur le système-objet et est donc appelé ''méta-programme''.

- La ''réflexion'' est le processus de raisonnement et/ou d'action sur soi.

- Un ''système réflexif'' est un méta-système relié causalement qui a pour objet le système lui-même. Les données d'un système réflexif contiennent, en plus de la représentation d'une partie du monde extérieur, une représentation causalement connectée de lui-même, appelée ''auto-représentation'' du système. [...] Lorsqu'un système raisonne ou agit sur lui-même, on parle de ''calcul réflexif''.

- Un langage avec une ''architecture réflexive'' est un langage dans lequel tous les systèmes ont accès à une représentation causale d'eux-mêmes.

- Un environnement de programmation a une ''architecture de méta-niveau'' s'il a une architecture qui supporte le méta-calcul, sans supporter le calcul réflexif.

- Le ''méta-objet'' d'un objet X représente les informations explicites sur X (par exemple, sur son comportement et son implémentation). L'objet X lui-même regroupe les informations sur l'entité du domaine qu'il représente.

{{{latex:
\bibliographystyle{alpha}
\bibliography{rmod}
}}}